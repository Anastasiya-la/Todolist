{"version":3,"sources":["components/AddItemForm.tsx","components/EditableSpan.tsx","Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","title","setTitle","error","setError","addItem","trim","onKeyDown","e","key","value","onChange","currentTarget","className","onClick","EditableSpan","editMode","setEditMode","oldTitle","onBlur","autoFocus","onDoubleClick","Todolist","newTitle","updateTodolistTitle","todolistId","removeTodolist","addTask","tasks","map","t","id","isDone","type","checked","changeTaskStatus","updateTaskTitle","removeTask","changeFilter","filter","App","todolistID1","v1","todolistID2","todolists","setTodolists","setTasks","filterValue","todolist","find","tl","todolistID","taskId","newTask","changeStatus","task","tasksForTodolist","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.1e0a028d.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n\r\n}\r\n\r\n\r\nconst AddItemForm = (props: AddItemFormPropsType) => {\r\n    const [title, setTitle] = useState('');\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value);\r\n        setError(null)\r\n    }\r\n\r\n    const onKeyDownHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== '') {\r\n            props.addItem(title.trim());\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n\r\n    }\r\n    return (\r\n        <div>\r\n            <input onKeyDown={onKeyDownHandler} value={title} onChange={onChangeHandler}\r\n                   className={error ? 'error' : ''}/>\r\n            <button onClick={addItem}>+</button>\r\n            {error && <div className={\"error-message\"}>{error}</div>}\r\n        </div>\r\n    )\r\n        ;\r\n};\r\n\r\nexport default AddItemForm;","import React, {ChangeEvent, useState} from 'react';\r\n\r\ntype EditableSpanPropsType = {\r\n    oldTitle: string\r\n    onChange: (newTitle: string) => void\r\n}\r\n\r\nconst EditableSpan = (props: EditableSpanPropsType) => {\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [title, setTitle] = useState(props.oldTitle)\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    }\r\n\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title)\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value);\r\n    }\r\n\r\n    return (\r\n        editMode ? <input value={title} onBlur={activateViewMode} autoFocus onChange={onChangeHandler}/> :\r\n            <span onDoubleClick={activateEditMode}>{props.oldTitle}</span>\r\n    );\r\n};\r\n\r\nexport default EditableSpan;","import React, {ChangeEvent} from 'react';\r\nimport {FilterValuesType} from \"./App\";\r\nimport './App.css';\r\nimport AddItemForm from \"./components/AddItemForm\";\r\nimport EditableSpan from \"./components/EditableSpan\";\r\n\r\ntype TodolistPropsType = {\r\n    todolistId: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (todolistID: string, taskId: string) => void\r\n    changeFilter: (buttonName: FilterValuesType, todolistId: string) => void\r\n    addTask: (todolistID: string, title: string) => void\r\n    changeTaskStatus: (todolistID: string, taskId: string, isDone: boolean) => void\r\n    removeTodolist: (todolistID: string) => void\r\n    filter: FilterValuesType\r\n    updateTaskTitle: (todolistId: string, taskId: string, newTitle: string) => void\r\n    updateTodolistTitle: (todolistId: string, newTitle: string) => void\r\n}\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\nexport const Todolist = (props: TodolistPropsType) => {\r\n\r\n\r\n    const onAllClickHandler = () => props.changeFilter('all', props.todolistId);\r\n\r\n\r\n    const onActiveClickHandler = () => props.changeFilter('active', props.todolistId);\r\n\r\n\r\n    const onCompletedClickHandler = () => props.changeFilter('completed', props.todolistId);\r\n\r\n    const onClickDelTodolistHandler = () => props.removeTodolist(props.todolistId)\r\n\r\n    const addTask = (title: string) => {\r\n        props.addTask(props.todolistId, title);\r\n    }\r\n\r\n    const updateTodolistTitle = (newTitle: string) => {\r\n        props.updateTodolistTitle(props.todolistId, newTitle)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h3>\r\n                <EditableSpan oldTitle={props.title} onChange={updateTodolistTitle}/>\r\n                <button onClick={onClickDelTodolistHandler}>x</button>\r\n\r\n            </h3>\r\n            <AddItemForm addItem={addTask}/>\r\n            <ul>\r\n                {props.tasks.map((t) => {\r\n\r\n                    const onClickHandler = () => {\r\n                        props.removeTask(props.todolistId, t.id);\r\n                    }\r\n\r\n                    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n                        props.changeTaskStatus(props.todolistId, t.id, e.currentTarget.checked);\r\n                    }\r\n\r\n                    const updateTitle = (newTitle: string) => {\r\n                        props.updateTaskTitle(props.todolistId, t.id, newTitle)\r\n                    }\r\n\r\n                    return <li key={t.id} className={t.isDone ? 'is-done' : ''}>\r\n                        <input type=\"checkbox\" checked={t.isDone} onChange={onChangeHandler}/>\r\n                        <EditableSpan oldTitle={t.title} onChange={updateTitle}/>\r\n                        <button onClick={onClickHandler}>X\r\n                        </button>\r\n                    </li>\r\n                })}\r\n            </ul>\r\n            <div>\r\n                <button onClick={onAllClickHandler}\r\n                        className={props.filter === 'all' ? 'active-filter' : ''}>\r\n                    All\r\n                </button>\r\n                <button onClick={onActiveClickHandler}\r\n                        className={props.filter === 'active' ? 'active-filter' : ''}>\r\n                    Active\r\n                </button>\r\n                <button onClick={onCompletedClickHandler}\r\n                        className={props.filter === 'completed' ? 'active-filter' : ''}>\r\n                    Completed\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {TaskType, Todolist} from \"./Todolist\";\r\nimport {v1} from \"uuid\";\r\nimport AddItemForm from \"./components/AddItemForm\";\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\n\r\ntype TodolistsType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\ntype TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction App() {\r\n\r\n    /*    const [tasks, setTasks] = useState([\r\n            {id: v1(), title: 'HTML&CSS', isDone: true},\r\n            {id: v1(), title: 'JS', isDone: true},\r\n            {id: v1(), title: 'React', isDone: false},\r\n            {id: v1(), title: 'Rest API', isDone: false},\r\n            {id: v1(), title: 'GraphQL', isDone: false}\r\n        ])*/\r\n\r\n    let todolistID1 = v1()\r\n    let todolistID2 = v1()\r\n\r\n    let [todolists, setTodolists] = useState<Array<TodolistsType>>([\r\n        {id: todolistID1, title: 'What to learn', filter: 'all'},\r\n        {id: todolistID2, title: 'What to buy', filter: 'all'},\r\n    ])\r\n\r\n    let [tasks, setTasks] = useState<TasksStateType>({\r\n        [todolistID1]: [\r\n            {id: v1(), title: 'HTML&CSS', isDone: true},\r\n            {id: v1(), title: 'JS', isDone: true},\r\n            {id: v1(), title: 'ReactJS', isDone: false},\r\n\r\n        ],\r\n        [todolistID2]: [\r\n            {id: v1(), title: 'Rest API', isDone: true},\r\n            {id: v1(), title: 'GraphQL', isDone: false},\r\n        ]\r\n    })\r\n\r\n\r\n    const changeFilter = (filterValue: FilterValuesType, todolistId: string) => {\r\n        let todolist = todolists.find(tl => tl.id === todolistId);\r\n        if (todolist) {\r\n            todolist.filter = filterValue\r\n        }\r\n        setTodolists([...todolists])\r\n    }\r\n\r\n    const removeTask = (todolistID: string, taskId: string) => {\r\n        tasks[todolistID] = tasks[todolistID].filter(t => t.id !== taskId)\r\n        setTasks({...tasks});\r\n    }\r\n\r\n    const addTask = (todolistID: string, title: string) => {\r\n        let newTask = {id: v1(), title: title, isDone: false};\r\n\r\n        setTasks({...tasks, [todolistID]: [newTask, ...tasks[todolistID]]});\r\n    }\r\n\r\n    const changeStatus = (todolistID: string, taskId: string, isDone: boolean) => {\r\n        /*  let task = tasks[todolistID].find(t=>t.id===taskId)\r\n          if(task){\r\n              task.isDone=isDone\r\n          }\r\n          setTasks({...tasks})*/\r\n        setTasks({...tasks, [todolistID]: tasks[todolistID].map(t => t.id === taskId ? {...t, isDone: isDone} : t)});\r\n    }\r\n\r\n    const removeTodolist = (todolistID: string) => {\r\n        setTodolists([...todolists].filter(tl => tl.id !== todolistID))\r\n        delete tasks[todolistID];\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    const addTodolist = (title: string) => {\r\n        const todolistID = v1()\r\n        let newTodolist: TodolistsType = {id: todolistID, title: title, filter: 'all'}\r\n        setTodolists([newTodolist, ...todolists])\r\n        setTasks({...tasks, [todolistID]: []})\r\n    }\r\n\r\n    const updateTaskTitle = (todolistId: string, taskId: string, newTitle: string) => {\r\n        setTasks({\r\n            ...tasks,\r\n            [todolistId]: tasks[todolistId].map(task => task.id === taskId ? {...task, title: newTitle} : task)\r\n        })\r\n    }\r\n\r\n    const updateTodolistTitle = (todolistId: string, newTitle: string) => {\r\n        setTodolists(todolists.map(tl => tl.id === todolistId ? {...tl, title: newTitle} : tl))\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AddItemForm addItem={addTodolist}/>\r\n            {todolists.map(tl => {\r\n\r\n                let tasksForTodolist = tasks[tl.id];\r\n\r\n                if (tl.filter === 'active') {\r\n                    tasksForTodolist = tasksForTodolist.filter(t => !t.isDone);\r\n                }\r\n                if (tl.filter === 'completed') {\r\n                    tasksForTodolist = tasksForTodolist.filter(t => t.isDone);\r\n                }\r\n\r\n                return (\r\n                    <Todolist\r\n                        key={tl.id}\r\n                        todolistId={tl.id}\r\n                        title={tl.title}\r\n                        tasks={tasksForTodolist}\r\n                        removeTask={removeTask}\r\n                        changeFilter={changeFilter}\r\n                        addTask={addTask}\r\n                        changeTaskStatus={changeStatus}\r\n                        filter={tl.filter}\r\n                        removeTodolist={removeTodolist}\r\n                        updateTaskTitle={updateTaskTitle}\r\n                        updateTodolistTitle={updateTodolistTitle}\r\n                    />)\r\n            })\r\n            }\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}